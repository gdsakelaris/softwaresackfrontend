
---------
C:/Users/gdsak_ukfkfpt/Desktop/softwaresackfrontend\src\components\StripeContainer.js:

  import { Elements } from "@stripe/react-stripe-js"
  import { loadStripe } from "@stripe/stripe-js"
  import PaymentForm from "./PaymentForm"
  
  // LIVE:
  const LIVE_PUBLISHABLE_KEY = "pk_live_51NH8wuDVWcsv0GQDGh4E7AHXRr06DnRWDSp6fOlhR7MgbcNWaFFvgQh9oAc4NqNdgScgEfy1uDPvptyfDt4oDpFs00pbDe48Me"
  
  // TEST:
  // const TEST_PUBLISHABLE_KEY = "pk_test_51NH8wuDVWcsv0GQDDA50qRas53ULlGs0w9GHQARixVZhS4PUYwJlyMOf0EaQOwAIcsiysa9EGI6kiSypsAbezWeF007HfK5Tya"
  
  const stripeTestPromise = loadStripe(LIVE_PUBLISHABLE_KEY)
  // const stripeTestPromise = loadStripe(TEST_PUBLISHABLE_KEY)
  
  export default function StripeContainer() {
      return (
          <Elements stripe={stripeTestPromise}>
              <PaymentForm />
          </Elements>
      )
  }

---------
C:/Users/gdsak_ukfkfpt/Desktop/softwaresackfrontend\src\components\PaymentForm.js:

  import { CardElement, useElements, useStripe } from "@stripe/react-stripe-js";
  import axios from "axios";
  import { useState } from "react";
  
  const CARD_OPTIONS = {
      iconStyle: "solid",
      style: {
          base: {
              iconColor: "#c4f0ff",
              color: "#fff",
              fontWeight: 500,
              fontFamily: "Roboto, Open Sans, Segoe UI, sans-serif",
              fontSize: "16px",
              fontSmoothing: "antialiased",
              ":-webkit-autofill": { color: "#fce883" },
              "::placeholder": { color: "#87bbfd" },
          },
          invalid: {
              iconColor: "#ffc7ee",
              color: "#ffc7ee",
          },
      },
  };
  
  export default function PaymentForm() {
      const [success, setSuccess] = useState(false);
      const bucket = "software-sack"
      const key = "FOBOT.exe"
      const stripe = useStripe();
      const elements = useElements();
  
      const handleSubmit = async (e) => {
          e.preventDefault();
          const { error, paymentMethod } = await stripe.createPaymentMethod({
              type: "card",
              card: elements.getElement(CardElement),
          });
  
          if (!error) {
              try {
                  const { id } = paymentMethod;
                  // Replace with your LIVE Publishable Stripe API key
                  const stripeApiKey =
                      "pk_live_51NH8wuDVWcsv0GQDGh4E7AHXRr06DnRWDSp6fOlhR7MgbcNWaFFvgQh9oAc4NqNdgScgEfy1uDPvptyfDt4oDpFs00pbDe48Me";
  
                  // Replace with your TEST Publishable Stripe API key
                  // const stripeApiKey =
                  //     "pk_test_51NH8wuDVWcsv0GQDDA50qRas53ULlGs0w9GHQARixVZhS4PUYwJlyMOf0EaQOwAIcsiysa9EGI6kiSypsAbezWeF007HfK5Tya";
  
                  const response = await axios.post(
                      `${process.env.REACT_APP_BACKEND_URL}payment`,
                      {
                          amount: 100,
                          id,
                          bucket,
                          key,
                      },
                      {
                          headers: {
                              Authorization: `Bearer ${stripeApiKey}`,
                              "Content-Type": "application/json",
                          },
                      }
                  );
  
                  if (response.data.success) {
                      console.log("Successful payment");
                      setSuccess(true);
                      // Download the file after successful payment
                      window.location.href = response.data.downloadUrl;
                  }
  
              } catch (error) {
                  console.log("Error", error);
              }
          } else {
              console.log(error.message);
          }
      };
  
      return (
          <>
              {!success ? (
                  <form onSubmit={handleSubmit}>
                      <fieldset className="FormGroup">
                          <div className="FormRow">
                              <CardElement options={CARD_OPTIONS} />
                          </div>
                      </fieldset>
                      <button>Pay</button>
                  </form>
              ) : (
                  <div>
                      <h2>Successfully Purchased</h2>
                  </div>
              )}
          </>
      );
  }


---------
C:/Users/gdsak_ukfkfpt/Desktop/softwaresackfrontend\src\index.js:

  import React from 'react';
  import ReactDOM from 'react-dom/client';
  // import dotenv from 'dotenv'; // Import dotenv
  import './index.css';
  import App from './App';
  // dotenv.config(); // Load environment variables from .env
  
  const root = ReactDOM.createRoot(document.getElementById('root'));
  root.render(
    <React.StrictMode>
      <App />
    </React.StrictMode>
  );
  
  


---------
C:/Users/gdsak_ukfkfpt/Desktop/softwaresackfrontend\src\App.js:

  import { useState } from 'react';
  import './App.css';
  import fobot from './assets/fobot.png';
  import StripeContainer from './components/StripeContainer';
  
  function App() {
    const [showItem, setShowItem] = useState(false);
    return (
      <div className='App'>
        <h1>Code2Text</h1>
        {showItem ? (
          <StripeContainer />
        ) : (
          <>
            <h3>$1.00</h3>
            <div style={{ textAlign: 'center' }}>
              <img src={fobot} alt='Fobot' />
            </div>
            <div style={{ display: 'flex', justifyContent: 'center' }}>
              <button onClick={() => setShowItem(true)}>Purchase Product</button>
            </div>
          </>
        )}
      </div>
    );
  }
  
  export default App;


---------
C:/Users/gdsak_ukfkfpt/Desktop/softwaresackfrontend\public\robots.txt:

  # https://www.robotstxt.org/robotstxt.html
  User-agent: *
  Disallow:


---------
C:/Users/gdsak_ukfkfpt/Desktop/softwaresackfrontend\public\manifest.json:

  {
    "short_name": "React App",
    "name": "Create React App Sample",
    "icons": [
      {
        "src": "favicon.ico",
        "sizes": "64x64 32x32 24x24 16x16",
        "type": "image/x-icon"
      },
      {
        "src": "logo192.png",
        "type": "image/png",
        "sizes": "192x192"
      },
      {
        "src": "logo512.png",
        "type": "image/png",
        "sizes": "512x512"
      }
    ],
    "start_url": ".",
    "display": "standalone",
    "theme_color": "#000000",
    "background_color": "#ffffff"
  }


---------
C:/Users/gdsak_ukfkfpt/Desktop/softwaresackfrontend\public\index.html:

  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="utf-8" />
      <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <meta name="theme-color" content="#000000" />
      <meta name="description" content="softwaresack.com" />
      <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
      <!--
        manifest.json provides metadata used when your web app is installed on a
        user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
      -->
      <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
      <!--
        Notice the use of %PUBLIC_URL% in the tags above.
        It will be replaced with the URL of the `public` folder during the build.
        Only files inside the `public` folder can be referenced from the HTML.
  
        Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
        work correctly both with client-side routing and a non-root public URL.
        Learn how to configure a non-root public URL by running `npm run build`.
      -->
      <title>Software Sack</title>
    </head>
    <body>
      <noscript></noscript>
      <div id="root"></div>
      <!--
        This HTML file is a template.
        If you open it directly in the browser, you will see an empty page.
  
        You can add webfonts, meta tags, or analytics to this file.
        The build step will place the bundled scripts into the <body> tag.
  
        To begin the development, run `npm start` or `yarn start`.
        To create a production bundle, use `npm run build` or `yarn build`.
      -->
    </body>
  </html>


---------
C:/Users/gdsak_ukfkfpt/Desktop/softwaresackfrontend\amplify\backend\types\amplify-dependent-resources-ref.d.ts:

  export type AmplifyDependentResourcesAttributes = {}

---------
C:/Users/gdsak_ukfkfpt/Desktop/softwaresackfrontend\amplify\backend\tags.json:

  [
    {
      "Key": "user:Stack",
      "Value": "{project-env}"
    },
    {
      "Key": "user:Application",
      "Value": "{project-name}"
    }
  ]

---------
C:/Users/gdsak_ukfkfpt/Desktop/softwaresackfrontend\amplify\.config\project-config.json:

  {
    "projectName": "softwaresackfrontend",
    "version": "3.1",
    "frontend": "javascript",
    "javascript": {
      "framework": "react",
      "config": {
        "SourceDir": "src",
        "DistributionDir": "build",
        "BuildCommand": "npm.cmd run-script build",
        "StartCommand": "npm.cmd run-script start"
      }
    },
    "providers": [
      "awscloudformation"
    ]
  }

---------
C:/Users/gdsak_ukfkfpt/Desktop/softwaresackfrontend\amplify\team-provider-info.json:

  {
    "dev": {
      "awscloudformation": {
        "AuthRoleName": "amplify-softwaresackfrontend-dev-191642-authRole",
        "UnauthRoleArn": "arn:aws:iam::673849527698:role/amplify-softwaresackfrontend-dev-191642-unauthRole",
        "AuthRoleArn": "arn:aws:iam::673849527698:role/amplify-softwaresackfrontend-dev-191642-authRole",
        "Region": "us-east-2",
        "DeploymentBucketName": "amplify-softwaresackfrontend-dev-191642-deployment",
        "UnauthRoleName": "amplify-softwaresackfrontend-dev-191642-unauthRole",
        "StackName": "amplify-softwaresackfrontend-dev-191642",
        "StackId": "arn:aws:cloudformation:us-east-2:673849527698:stack/amplify-softwaresackfrontend-dev-191642/87eed1e0-2a80-11ee-9eb3-02c0efc76543",
        "AmplifyAppId": "dwqyui3faiwa"
      }
    }
  }

---------
C:/Users/gdsak_ukfkfpt/Desktop/softwaresackfrontend\amplify\cli.json:

  {
    "features": {
      "graphqltransformer": {
        "addmissingownerfields": true,
        "improvepluralization": false,
        "validatetypenamereservedwords": true,
        "useexperimentalpipelinedtransformer": true,
        "enableiterativegsiupdates": true,
        "secondarykeyasgsi": true,
        "skipoverridemutationinputtypes": true,
        "transformerversion": 2,
        "suppressschemamigrationprompt": true,
        "securityenhancementnotification": false,
        "showfieldauthnotification": false,
        "usesubusernamefordefaultidentityclaim": true,
        "usefieldnameforprimarykeyconnectionfield": false,
        "enableautoindexquerynames": true,
        "respectprimarykeyattributesonconnectionfield": true,
        "shoulddeepmergedirectiveconfigdefaults": false,
        "populateownerfieldforstaticgroupauth": true
      },
      "frontend-ios": {
        "enablexcodeintegration": true
      },
      "auth": {
        "enablecaseinsensitivity": true,
        "useinclusiveterminology": true,
        "breakcirculardependency": true,
        "forcealiasattributes": false,
        "useenabledmfas": true
      },
      "codegen": {
        "useappsyncmodelgenplugin": true,
        "usedocsgeneratorplugin": true,
        "usetypesgeneratorplugin": true,
        "cleangeneratedmodelsdirectory": true,
        "retaincasestyle": true,
        "addtimestampfields": true,
        "handlelistnullabilitytransparently": true,
        "emitauthprovider": true,
        "generateindexrules": true,
        "enabledartnullsafety": true,
        "generatemodelsforlazyloadandcustomselectionset": false
      },
      "appsync": {
        "generategraphqlpermissions": true
      },
      "latestregionsupport": {
        "pinpoint": 1,
        "translate": 1,
        "transcribe": 1,
        "rekognition": 1,
        "textract": 1,
        "comprehend": 1
      },
      "project": {
        "overrides": true
      }
    },
    "debug": {
      "shareProjectConfig": true
    }
  }

---------
C:/Users/gdsak_ukfkfpt/Desktop/softwaresackfrontend\package.json:

  {
    "name": "react-frontend",
    "version": "0.1.0",
    "private": true,
    "dependencies": {
      "@stripe/react-stripe-js": "^2.1.1",
      "@stripe/stripe-js": "^1.54.1",
      "@testing-library/jest-dom": "^5.17.0",
      "@testing-library/react": "^13.4.0",
      "@testing-library/user-event": "^13.5.0",
      "axios": "^1.4.0",
      "dotenv": "^16.3.1",
      "path-browserify": "^1.0.1",
      "react": "^18.2.0",
      "react-dom": "^18.2.0",
      "react-scripts": "5.0.1",
      "web-vitals": "^2.1.4"
    },
    "scripts": {
      "start": "react-scripts start",
      "build": "react-scripts build",
      "test": "react-scripts test",
      "eject": "react-scripts eject"
    },
    "eslintConfig": {
      "extends": [
        "react-app",
        "react-app/jest"
      ]
    },
    "browserslist": {
      "production": [
        ">0.2%",
        "not dead",
        "not op_mini all"
      ],
      "development": [
        "last 1 chrome version",
        "last 1 firefox version",
        "last 1 safari version"
      ]
    },
    "devDependencies": {
      "customize-cra": "^1.0.0"
    }
  }


---------
C:/Users/gdsak_ukfkfpt/Desktop/softwaresackfrontend\config-overrides.js:

  // const path = require('path');
  
  module.exports = function override(config) {
      // Add fallback for 'path' module
      config.resolve.fallback = {
          ...config.resolve.fallback,
          path: require.resolve('path-browserify'),
      };
      return config;
  };
  


---------
C:/Users/gdsak_ukfkfpt/Desktop/softwaresackfrontend\.gitignore:

  # See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
  
  # dependencies
  /node_modules
  /.pnp
  .pnp.js
  
  # testing
  /coverage
  
  # production
  /build
  
  # misc
  .DS_Store
  .env.local
  .env.development.local
  .env.test.local
  .env.production.local
  
  npm-debug.log*
  yarn-debug.log*
  yarn-error.log*
  
  # 
  .env
  
  #amplify-do-not-edit-begin
  amplify/\#current-cloud-backend
  amplify/.config/local-*
  amplify/logs
  amplify/mock-data
  amplify/mock-api-resources
  amplify/backend/amplify-meta.json
  amplify/backend/.temp
  build/
  dist/
  node_modules/
  aws-exports.js
  awsconfiguration.json
  amplifyconfiguration.json
  amplifyconfiguration.dart
  amplify-build-config.json
  amplify-gradle-config.json
  amplifytools.xcconfig
  .secret-*
  **.sample
  #amplify-do-not-edit-end 
  

